#!/usr/bin/env python2

'''
git-recent shows a directory listing inside a git repository, ordered by
commit date.
Copyright (C) 2013  Peter Raboud

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
'''

import colorama
import datetime
import itertools
import os.path
import pygit2


def split_path(path):
    lst = []
    path = path.rstrip('/')
    (path, tail) = os.path.split(path)
    while tail != '':
        lst.append(tail)
        (path, tail) = os.path.split(path)
    lst.reverse()
    return lst


def print_table(rows, colsep='  '):
    '''
    Takes a list of lists of text (rows=[columns]=[[strings]]),
    and prints out the table so that each string is aligned with the other
    strings in its column.
    Each `text` may either be a string, or a two-tuple of a string and color
    string from colorama. This is done so the color string is not counted
    in the column width.
    '''

    def get_width(text):
        if isinstance(text, str):
            return len(text)
        else:
            return len(text[0])

    # width of each column
    widths = [max(map(get_width, col))
              for col in zip(*rows)]

    def justify_and_colourize(text, width):
        if isinstance(text, str):
            string = text
            start_colour = ''
            end_colour = ''
        else:
            string = text[0]
            start_colour = text[1]
            end_colour = colorama.Fore.RESET
        return "{start_colour}{text:{width}}{end_colour}".format(
            text=string,
            width=width,
            start_colour=start_colour,
            end_colour=end_colour,
        )

    # print each row, columns seperated by colsep, each column at the
    # appropriate width
    for r in rows:
        print colsep.join([justify_and_colourize(text, width)
                          for text, width in itertools.izip(r, widths)])


class Path:
    '''
    Represents a path (file or folder) under source control
    '''
    def __init__(self, path, repo):
        self.relpath = path
        self.path = os.path.relpath(path, repo.workdir)
        self.split = split_path(self.path)
        self.mod_date = None
        self.mod_commit = None
        self.current_hex = None

    def insert_into_file_tree(self, d):
        for p in self.split[:-1]:
            if p in d:
                d = d[p]
                if not isinstance(d, dict):
                    raise ValueError
            else:
                t = dict()
                d[p] = t
                d = t
        d[self.split[-1]] = self

    def cols(self):
        columns = []
        if self.current_hex is None:
            columns.append((self.relpath, colorama.Fore.RED))
            columns.append('not tracked')
        else:
            columns.append((self.relpath, colorama.Fore.GREEN))
            columns.append(str(self.mod_date))
        return columns

    def __lt__(self, other):
        if self.mod_date is None:
            return True
        elif other.mod_date is None:
            return False
        else:
            return self.mod_date < other.mod_date


def walk_file_tree(file_tree, git_tree, function):
    new_file_tree = dict()
    for path_segment, path in file_tree.iteritems():
        if git_tree is None:
            subtree = None
        elif path_segment in git_tree:
            subtree = git_tree[path_segment].to_object()
        else:
            subtree = None

        if isinstance(path, dict):
            new_file_tree[path_segment] = walk_file_tree(path, subtree, function)
        else:
            if not function(path, subtree):
                new_file_tree[path_segment] = file_tree[path_segment]
    return new_file_tree


if __name__ == '__main__':
    repo = pygit2.Repository(pygit2.discover_repository('.'))
    file_tree = dict()
    listing = os.listdir(os.getcwd())
    #listing = ['git-pivotal']
    paths = [Path(path, repo) for path in listing]

    for p in paths:
        p.insert_into_file_tree(file_tree)

    def set_initial(path, obj):
        if obj is None:
            return True
        else:
            path.current_hex = obj.hex
            return False

    file_tree = walk_file_tree(file_tree, repo.head.tree, set_initial)

    for revision in repo.walk(repo.head.hex, pygit2.GIT_SORT_TIME):
        def check_for_changes(path, obj):
            if obj is not None and path.current_hex == obj.hex:
                path.mod_date = datetime.datetime.fromtimestamp(
                    revision.commit_time
                )
                path.mod_commit = revision.hex
                return False
            else:
                return True

        file_tree = walk_file_tree(file_tree, revision.tree, check_for_changes)

    paths.sort(reverse=True)

    output_rows = [p.cols() for p in paths]
    print_table(output_rows)
