#!/usr/bin/env python2

'''
git-recent shows a directory listing inside a git repository, ordered by
commit date.
Copyright (C) 2013  Peter Raboud

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
'''

import argparse
import colorama
import datetime
import itertools
import os.path
import pygit2
import subprocess


# global var containing arguments (including formatting options)
args = None


def split_path(path):
    lst = []
    path = path.rstrip('/')
    (path, tail) = os.path.split(path)
    while tail != '':
        lst.append(tail)
        (path, tail) = os.path.split(path)
    lst.reverse()
    return lst


def print_table(rows, colsep='  '):
    '''
    Takes a list of lists of text (rows=[columns]=[[strings]]),
    and prints out the table so that each string is aligned with the other
    strings in its column.
    Each `text` may either be a string, or a two-tuple of a string and color
    string from colorama. This is done so the color string is not counted
    in the column width.
    '''

    def get_width(text):
        if isinstance(text, str):
            return len(text)
        else:
            return len(text[0])

    # width of each column
    widths = [max(map(get_width, col))
              for col in itertools.izip_longest(*rows, fillvalue='')]

    def justify_and_colourize(text, width):
        if isinstance(text, str):
            string = text
            start_colour = ''
            end_colour = ''
        else:
            string = text[0]
            start_colour = text[1]
            end_colour = colorama.Fore.RESET
        return "{start_colour}{text:{width}}{end_colour}".format(
            text=string,
            width=width,
            start_colour=start_colour,
            end_colour=end_colour,
        )

    # print each row, columns seperated by colsep, each column at the
    # appropriate width
    for r in rows:
        cols = [justify_and_colourize(text, width)
                for text, width
                in itertools.izip_longest(r, widths, fillvalue='')]
        print colsep.join(cols)


class Path:
    '''
    Represents a path (file or folder) under source control
    '''
    def __init__(self, path, repo):
        # path relative to current directory
        self.relpath = path

        # path relative to repo root
        self.path = os.path.relpath(path, repo.workdir)

        self.mod_commit = None
        self.current_obj = None

    def insert_into_file_tree(self, d):
        split = split_path(self.path)
        for p in split[:-1]:
            if p in d:
                d = d[p]
                if not isinstance(d, dict):
                    raise ValueError
            else:
                t = dict()
                d[p] = t
                d = t
        d[split[-1]] = self

    def cols(self):
        columns = []
        if self.current_obj is None:
            columns.append((self.relpath, colorama.Fore.RED))
            columns.append('not tracked')
        else:
            columns.append((self.relpath, colorama.Fore.GREEN))
            columns.append(str(self.mod_date))
            if args.show_commit:
                columns.append(str(self.mod_commit.hex))
        return columns

    def set_initial_obj(self, current_obj, commit):
        if current_obj is None:
            return True
        else:
            self.current_obj = current_obj
            self.mod_commit = commit

            self.candidates_for_comparison = set()
            self.candidates_for_comparison.add(commit.hex)
            return False

    def compare_past_obj(self, past_obj, commit):
        '''
        This is called by walk_file_tree to look for the last change made to
        the file. We are walking backwards in history, looking for the first
        commit containing an instance of the file which is different from it's
        present state. The child of that commit is the changing commit.
        '''
        assert self.current_obj

        if not commit.hex in self.candidates_for_comparison:
            return False
        elif past_obj is not None and self.current_obj.hex == past_obj.hex:
            # there are no differences in version of the file
            # this may be the last commit where this is the case
            # so, we queue up the parents of this commit to see if any
            # of these commits have the file in the same state

            # forget about any checking we are doing
            self.candidates_for_comparison.clear()
            # queue up checking for parent commits
            self.candidates_for_comparison.update(
                [c.hex for c in commit.parents]
            )

            # store this commit (in case this is the modifying commit)
            self.mod_commit = commit
            return False
        else:
            # file has been removed, or is different

            # if there are no more places to look for the source of the change
            # then the mod_commit is really the modifying commit
            self.candidates_for_comparison.remove(commit.hex)
            if len(self.candidates_for_comparison) == 0:
                return True

    def ignore_pre_init(self):
        # after creation of object,
        # check if we want to investigate this object
        # all we have at this point is object name
        if not (args.show_hidden or args.files) and self.is_hidden():
            return True
        else:
            return False

    def ignore_post_init(self):
        # after finding the current status of the object in git history,
        # check if we want to investigate this object
        # at this point, we have the object's current_hex
        if args.hide_untracked and self.current_obj is None:
            return True
        else:
            return False

    def ignore_post_hist(self):
        # after finding the history of the object,
        # check if we want to report about this object
        # at this point, we have the commit this object was last modified by
        return False

    def is_hidden(self):
        split = split_path(self.relpath)
        return any(map(lambda p: p[0] == '.', split))

    @property
    def mod_date(self):
        if not hasattr(self, '_mod_date'):
            if self.mod_commit is None:
                self._mod_date = None
            else:
                if args.author_date:
                    # use author date
                    timestamp = int(subprocess.check_output(
                        ['git', 'show', '-s', '--format=%at', self.mod_commit.hex]
                    ))
                else:
                    # use committer date
                    timestamp = self.mod_commit.commit_time
                self._mod_date = datetime.datetime.fromtimestamp(timestamp)
        return self._mod_date

    def __lt__(self, other):
        if self.mod_date is None:
            return True
        elif other.mod_date is None:
            return False
        else:
            return self.mod_date < other.mod_date


def walk_file_tree(file_tree, git_tree, function):
    '''
    Takes a file tree and a git tree object, and a function of type:
        (Path, git_obj) -> Bool
    Recursively traverse file tree and git tree simultaenously.
    Apply function to all paths and tree_objects (paired).
    Remove the path from the file tree if the function returns true.

    This function minimizes the amount of traversing the file tree
    required.
    '''
    new_file_tree = dict()
    for path_segment, path in file_tree.iteritems():
        if git_tree is None:
            git_obj = None
        elif path_segment in git_tree:
            git_obj = git_tree[path_segment]
        else:
            git_obj = None

        if isinstance(path, dict):
            if git_obj is not None:
                # we only convert to object (presumably tree)
                # if we are actually going to traverse this
                # if we are only interested in the hex, we don't need
                # to do the extra lookup
                git_obj = git_obj.to_object()
            new_sub_tree = walk_file_tree(path, git_obj, function)
            if len(new_sub_tree) != 0:
                new_file_tree[path_segment] = new_sub_tree
        else:
            if not function(path, git_obj):
                new_file_tree[path_segment] = file_tree[path_segment]
    return new_file_tree


if __name__ == '__main__':
    description = ('Do a directory listing ordered by last modification date '
                   'by a commit')

    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('files', metavar='files', nargs='*')
    parser.add_argument('-c', '--commit', dest='show_commit',
                        action='store_true')
    parser.add_argument('-u', '--hide-untracked', dest='hide_untracked',
                        action='store_true')
    parser.add_argument('-H', '--show-hidden', dest='show_hidden',
                        action='store_true')
    parser.add_argument('-a', '--author-date', dest='author_date',
                        action='store_true')
    args = parser.parse_args()

    repo = pygit2.Repository(pygit2.discover_repository('.'))

    file_tree = dict()
    listing = args.files or os.listdir(os.getcwd())
    paths = [Path(path, repo) for path in listing]

    paths = filter(lambda p: not p.ignore_pre_init(), paths)

    # construct file tree
    # a dictionary mapping a string (file path) to a Path object (a file)
    # or a mapping to another such dictionary (a subdirectory)
    for p in paths:
        p.insert_into_file_tree(file_tree)

    # for each object in file tree, find the hex of that obj at this commit
    file_tree = walk_file_tree(
        file_tree,
        repo.head.tree,
        lambda p, obj: p.set_initial_obj(obj, repo.head),
    )

    paths = filter(lambda p: not p.ignore_post_init(), paths)

    # for each object in file tree, find when it was last modified
    for revision in repo.walk(repo.head.hex, pygit2.GIT_SORT_TIME):
        file_tree = walk_file_tree(
            file_tree,
            revision.tree,
            lambda p, obj: p.compare_past_obj(obj, revision),
        )
        if len(file_tree) == 0:
            # then we are done finding mod dates, so stop walking
            # history
            break

    # output to console
    paths.sort(reverse=True)

    paths = filter(lambda p: not p.ignore_post_hist(), paths)

    output_rows = [p.cols() for p in paths]
    print_table(output_rows)
